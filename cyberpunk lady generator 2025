<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cyberpunk Lady Grafik</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #1a202c; /* Dark background */
            color: #e2e8f0; /* Light text */
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            padding: 20px;
            box-sizing: border-box;
        }
        .container {
            background-color: #2d3748; /* Slightly lighter dark background for container */
            padding: 30px;
            border-radius: 12px;
            box-shadow: 0 10px 15px rgba(0, 0, 0, 0.2);
            width: 100%;
            max-width: 600px;
            text-align: center;
        }
        input[type="text"] {
            width: 100%;
            padding: 12px;
            margin-bottom: 20px;
            border-radius: 8px;
            border: 1px solid #4a5568;
            background-color: #28303f;
            color: #e2e8f0;
            outline: none;
            box-sizing: border-box;
        }
        button {
            background-color: #63b3ed; /* Light blue */
            color: #1a202c;
            padding: 12px 25px;
            border-radius: 8px;
            border: none;
            font-weight: 600;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.2s ease;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        button:hover {
            background-color: #4299e1; /* Darker blue on hover */
            transform: translateY(-2px);
        }
        button:active {
            transform: translateY(0);
        }
        #loadingIndicator {
            margin-top: 20px;
            font-size: 1.1rem;
            color: #90cdf4; /* Lighter blue */
            display: none; /* Hidden by default */
        }
        #imageContainer {
            margin-top: 30px;
            border: 1px solid #4a5568;
            border-radius: 8px;
            overflow: hidden;
            display: inline-block; /* To contain the image properly */
            max-width: 100%;
            height: auto;
        }
        #generatedImage {
            max-width: 100%;
            height: auto;
            border-radius: 8px; /* Apply rounded corners to the image itself */
        }
    </style>
</head>
<body>
    <div class="container">
        <h1 class="text-3xl font-bold mb-6 text-white">Cyberpunk Lady Grafik Generator</h1>

        <div class="mb-4">
            <input type="text" id="imagePrompt" placeholder="Geben Sie eine Beschreibung ein..." value="Eine Cyberpunk-Lady im Jahr 2025, mit neonblauen und rosa Lichtern, futuristischer Stadt im Hintergrund, detailliert, 8k, Sci-Fi Kunstwerk">
        </div>

        <button id="generateButton">Bild generieren</button>

        <div id="loadingIndicator" class="text-lg">Generiere Bild...</div>

        <div id="imageContainer">
            <img id="generatedImage" src="https://placehold.co/500x500/1e293b/a78bfa?text=Ihr+Bild+erscheint+hier" alt="Generiertes Bild">
        </div>
    </div>

    <script type="module">
        const imagePromptInput = document.getElementById('imagePrompt');
        const generateButton = document.getElementById('generateButton');
        const loadingIndicator = document.getElementById('loadingIndicator');
        const generatedImage = document.getElementById('generatedImage');

        // Function to convert base64 to ArrayBuffer for audio (not directly used here, but good to have)
        function base64ToArrayBuffer(base64) {
            const binaryString = window.atob(base64);
            const len = binaryString.length;
            const bytes = new Uint8Array(len);
            for (let i = 0; i < len; i++) {
                bytes[i] = binaryString.charCodeAt(i);
            }
            return bytes.buffer;
        }

        /**
         * Fetches content from the Gemini API with exponential backoff.
         * @param {string} apiUrl - The API endpoint URL.
         * @param {object} payload - The request payload.
         * @param {number} retries - Number of retries.
         * @param {number} delay - Initial delay in milliseconds.
         * @returns {Promise<object>} - The JSON response from the API.
         */
        async function fetchWithBackoff(apiUrl, payload, retries = 5, delay = 1000) {
            for (let i = 0; i < retries; i++) {
                try {
                    const apiKey = ""; // Canvas will automatically provide the API key
                    const url = `${apiUrl}?key=${apiKey}`;
                    const response = await fetch(url, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });

                    if (response.ok) {
                        return await response.json();
                    } else if (response.status === 429 && i < retries - 1) {
                        // Too Many Requests, retry with exponential backoff
                        await new Promise(resolve => setTimeout(resolve, delay * Math.pow(2, i)));
                    } else {
                        throw new Error(`API call failed with status: ${response.status}`);
                    }
                } catch (error) {
                    if (i < retries - 1) {
                        // Log error for debugging but don't rethrow immediately for retries
                        console.error(`Attempt ${i + 1} failed: ${error.message}. Retrying...`);
                        await new Promise(resolve => setTimeout(resolve, delay * Math.pow(2, i)));
                    } else {
                        throw error; // Re-throw if all retries fail
                    }
                }
            }
            throw new Error("Max retries exceeded");
        }

        // Function to generate the image
        async function generateImage() {
            const prompt = imagePromptInput.value.trim();
            if (!prompt) {
                alert('Bitte geben Sie einen Prompt ein!'); // Using a simple alert for now, should be custom modal
                return;
            }

            loadingIndicator.style.display = 'block';
            generatedImage.src = 'https://placehold.co/500x500/1e293b/a78bfa?text=Generiere...'; // Placeholder while loading
            generatedImage.alt = 'Bild wird generiert...';

            try {
                const payload = {
                    instances: { prompt: prompt },
                    parameters: { "sampleCount": 1 }
                };
                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/imagen-3.0-generate-002:predict`;

                const result = await fetchWithBackoff(apiUrl, payload);

                if (result.predictions && result.predictions.length > 0 && result.predictions[0].bytesBase64Encoded) {
                    const imageUrl = `data:image/png;base64,${result.predictions[0].bytesBase64Encoded}`;
                    generatedImage.src = imageUrl;
                    generatedImage.alt = `Generiertes Bild: ${prompt}`;
                } else {
                    generatedImage.src = 'https://placehold.co/500x500/1e293b/a78bfa?text=Fehler:+Kein+Bild+gefunden';
                    generatedImage.alt = 'Fehler beim Generieren des Bildes';
                    console.error("Unexpected API response structure:", result);
                }
            } catch (error) {
                console.error("Fehler beim Generieren des Bildes:", error);
                generatedImage.src = 'https://placehold.co/500x500/1e293b/a78bfa?text=Fehler+beim+Generieren';
                generatedImage.alt = 'Fehler beim Generieren des Bildes';
                // In a real app, display a user-friendly error message on the UI
            } finally {
                loadingIndicator.style.display = 'none';
            }
        }

        // Add event listener to the button
        generateButton.addEventListener('click', generateImage);

        // Generate an image on initial load
        window.onload = function() {
            generateImage();
        };
    </script>
</body>
</html>
